<?php
require_once('../tools.php');

$datalist = array(
  // 10068107 => 'ストーリアダッシュ',
  // 10068108 => 'コミックガンマぷらす',
  // 10068109 => 'コミックガンマぷらす',
  // 10068110 => 'コミックガンマぷらす',
  // 10068162 => 'コミックガンマ',
  // 10068163 => 'コミックガンマ',
  // 10068164 => 'コミックガンマ',
  // 10068253 => '麗人セレクション',
  // 10068254 => '麗人セレクション',
  // 10068255 => '麗人セレクション',
  // 10068256 => 'バンブーコミックスmoment',
  // 10068257 => '麗人セレクション',
  // 10068258 => '麗人セレクション',
  // 10068259 => 'バンブーコミックスmoment',
  // 10068260 => 'アメイロ',
  // 10068261 => 'バンブーコミックスmoment',
  // 10068262 => 'Qpaコレクション',
  // 10068263 => 'Qpaコレクション',
  // 10068264 => 'Qpaコレクション',
  // 10068265 => 'Qpaコレクション',
  // 10068266 => 'Qpaコレクション',
  // 10068267 => 'バンブーコミックスmoment',
  // 10068268 => '麗人セレクション',
  // 10068269 => '麗人セレクション',
  // 10068270 => '麗人セレクション',
  // 10068271 => 'アメイロ',
  // 10068272 => 'Qpaコレクション',
  // 10068273 => 'Qpaコレクション',
  // 10068274 => '麗人セレクション',
  // 10068275 => '麗人セレクション',
  // 10068276 => '麗人セレクションDX',
  // 10068277 => '麗人セレクション',
  // 10068278 => '麗人セレクション',
  // 10068279 => '麗人セレクション',
  // 10068280 => '麗人セレクション',
  // 10068281 => '潤恋オトナセレクション',
  // 10068282 => '潤恋オトナセレクション',
  // 10068283 => '潤恋オトナセレクション',
  // 10068284 => '潤恋オトナセレクション',
  // 10068285 => '潤恋オトナセレクション',
  // 10068286 => '恋愛天国☆恋パラコレクション',
  // 10068287 => '恋愛天国☆恋パラコレクション',
  // 10068288 => '恋愛天国☆恋パラコレクション',
  // 10068289 => '恋愛天国☆恋パラコレクション',
  // 10068290 => '恋愛天国☆恋パラコレクション',
  // 10068291 => '恋愛天国☆恋パラコレクション',
  // 10068292 => '恋愛天国☆恋パラコレクション',
  // 10068293 => '恋愛天国☆恋パラコレクション',
  // 10068294 => '恋愛天国☆恋パラコレクション',
  // 10068295 => '恋愛天国☆恋パラコレクション',
  // 10068296 => '恋愛天国☆恋パラコレクション',
  // 10068297 => '潤恋オトナセレクション',
  // 10068298 => '潤恋オトナセレクション',
  // 10068299 => '潤恋オトナセレクション',
  // 10068300 => '潤恋オトナセレクション',
  // 10068301 => '潤恋オトナセレクション',
  // 10068302 => '潤恋オトナセレクション',
  // 10068303 => '潤恋オトナセレクション',
  // 10068304 => '潤恋オトナセレクション',
  // 10068305 => '潤恋オトナセレクション',
  // 10068306 => '潤恋オトナセレクション',
  // 10068307 => '潤恋オトナセレクション',
  // 10068308 => '潤恋オトナセレクション',
  // 10068309 => '潤恋オトナセレクション',
  // 10068310 => '潤恋オトナセレクション',
  // 10068311 => '潤恋オトナセレクション',
  // 10068312 => '恋愛天国☆恋パラコレクション',
  // 10068313 => '恋愛天国☆恋パラコレクション',
  // 10068314 => '恋愛天国☆恋パラコレクション',
  // 10068315 => '恋愛天国☆恋パラコレクション',
  // 10068316 => '恋愛天国☆恋パラコレクション',
  // 10068317 => '恋愛天国☆恋パラコレクション',
  // 10068318 => '恋愛天国☆恋パラコレクション',
  // 10068319 => '恋愛天国☆恋パラコレクション',
  // 10068320 => '恋愛天国☆恋パラコレクション',
  // 10068321 => '恋愛天国☆恋パラコレクション',
  // 10068322 => '恋愛天国☆恋パラコレクション',
  // 10068323 => '恋愛天国☆恋パラコレクション',
  // 10068324 => '恋愛天国☆恋パラコレクション',
  // 10068325 => '恋愛天国☆恋パラコレクション',
  // 10068326 => '恋愛天国☆恋パラコレクション',
  // 10068327 => '恋愛天国☆恋パラコレクション',
  // 10068328 => '恋愛天国☆恋パラコレクション',
  // 10068329 => '恋愛天国☆恋パラコレクション',
  // 10068330 => '恋愛天国☆恋パラコレクション',
  // 10068331 => '恋愛天国☆恋パラコレクション',
  // 10068332 => '恋愛天国☆恋パラコレクション',
  // 10068333 => '恋愛天国☆恋パラコレクション',
  // 10068334 => '恋愛天国☆恋パラコレクション',
  // 10068335 => '恋愛天国☆恋パラコレクション',
  // 10068336 => '恋愛天国☆恋パラコレクション',
  // 10068337 => '恋愛天国☆恋パラコレクション',
  // 10068338 => '恋愛天国☆恋パラコレクション',
  // 10068339 => '恋愛天国☆恋パラコレクション',
  // 10068340 => '恋愛天国☆恋パラコレクション',
  // 10068341 => '恋愛天国☆恋パラコレクション',
  // 10068342 => '恋愛天国☆恋パラコレクション',
  // 10068343 => '恋愛天国☆恋パラコレクション',
  // 10068344 => '恋愛天国☆恋パラコレクション',
  // 10068345 => '恋愛天国☆恋パラコレクション',
  // 10068346 => '恋愛天国☆恋パラコレクション',
  // 10068347 => '恋愛天国☆恋パラコレクション',
  // 10068348 => '恋愛天国☆恋パラコレクション',
  // 10068349 => '恋愛天国☆恋パラコレクション',
  // 10068350 => '恋愛天国☆恋パラコレクション',
  // 10068351 => '恋愛天国☆恋パラコレクション',
  // 10068352 => '恋愛天国☆恋パラコレクション',
  // 10068353 => '恋愛天国☆恋パラコレクション',
  // 10068354 => '恋愛天国☆恋パラコレクション',
  // 10068355 => '恋愛天国☆恋パラコレクション',
  // 10068356 => '恋愛天国☆恋パラコレクション',
  // 10068357 => '恋愛天国☆恋パラコレクション',
  // 10068358 => '恋愛天国☆恋パラコレクション',
  // 10068359 => '恋愛天国☆恋パラコレクション',
  // 10068360 => '恋愛天国☆恋パラコレクション',
  // 10068361 => '恋愛天国☆恋パラコレクション',
  // 10068362 => '恋愛天国☆恋パラコレクション',
  // 10068363 => '恋愛天国☆恋パラコレクション',
  // 10068364 => '恋愛天国☆恋パラコレクション',
  // 10068365 => '恋愛天国☆恋パラコレクション',
  // 10068366 => '恋愛天国☆恋パラコレクション',
  // 10068367 => '恋愛天国☆恋パラコレクション',
  // 10068368 => '恋愛天国☆恋パラコレクション',
  // 10068369 => '恋愛天国☆恋パラコレクション',
  // 10068370 => '恋愛天国☆恋パラコレクション',
  // 10068371 => '恋愛天国☆恋パラコレクション',
  // 10068372 => '恋愛天国☆恋パラコレクション',
  // 10068373 => '恋愛天国☆恋パラコレクション',
  // 10068374 => '恋愛天国☆恋パラコレクション',
  // 10068375 => '恋愛天国☆恋パラコレクション',
  // 10068376 => '恋愛天国☆恋パラコレクション',
  // 10068377 => '恋愛天国☆恋パラコレクション',
  // 10068378 => '恋愛天国☆恋パラコレクション',
  // 10068379 => '恋愛天国☆恋パラコレクション',
  // 10068380 => '恋愛天国☆恋パラコレクション',
  // 10068381 => '恋愛天国☆恋パラコレクション',
  // 10068382 => '恋愛天国☆恋パラコレクション',
  // 10068383 => '恋愛天国☆恋パラコレクション',
  // 10068384 => '恋愛天国☆恋パラコレクション',
  // 10068385 => '恋愛天国☆恋パラコレクション',
  // 10068386 => '恋愛天国☆恋パラコレクション',
  // 10068387 => '恋愛天国☆恋パラコレクション',
  // 10068388 => '恋愛天国☆恋パラコレクション',
  // 10068389 => '恋愛天国☆恋パラコレクション',
  // 10068390 => '恋愛天国☆恋パラコレクション',
  // 10068391 => '恋愛天国☆恋パラコレクション',
  // 10068392 => '恋愛天国☆恋パラコレクション',
  // 10068393 => '恋愛天国☆恋パラコレクション',
  // 10068394 => '恋愛天国☆恋パラコレクション',
  // 10068395 => '恋愛天国☆恋パラコレクション',
  // 10068396 => '恋愛天国☆恋パラコレクション',
  // 10068397 => '恋愛天国☆恋パラコレクション',
  // 10068398 => '恋愛天国☆恋パラコレクション',
  // 10068399 => '恋愛天国☆恋パラコレクション',
  // 10068400 => '恋愛天国☆恋パラコレクション',
  // 10068401 => '恋愛天国☆恋パラコレクション',
  // 10068402 => '恋愛天国☆恋パラコレクション',
  // 10068403 => '恋愛天国☆恋パラコレクション',
  // 10068404 => '恋愛天国☆恋パラコレクション',
  // 10068405 => '恋愛天国☆恋パラコレクション',
  // 10068406 => '恋愛天国☆恋パラコレクション',
  // 10068407 => '恋愛天国☆恋パラコレクション',
  // 10068408 => '恋愛天国☆恋パラコレクション',
  // 10068409 => '恋愛天国☆恋パラコレクション',
  // 10068410 => '恋愛天国☆恋パラコレクション',
  // 10068411 => '恋愛天国☆恋パラコレクション',
  // 10068412 => '恋愛天国☆恋パラコレクション',
  // 10068413 => '恋愛天国☆恋パラコレクション',
  // 10068414 => '恋愛天国☆恋パラコレクション',
  // 10068415 => '恋愛天国☆恋パラコレクション',
  // 10068416 => '恋愛天国☆恋パラコレクション',
  // 10068417 => '恋愛天国☆恋パラコレクション',
  // 10068418 => '恋愛天国☆恋パラコレクション',
  // 10068419 => '恋愛天国☆恋パラコレクション',
  // 10068420 => '恋愛天国☆恋パラコレクション',
  // 10068421 => '恋愛天国☆恋パラコレクション',
  // 10068422 => '恋愛天国☆恋パラコレクション',
  // 10068423 => '恋愛天国☆恋パラコレクション',
  // 10068424 => '恋愛天国☆恋パラコレクション',
  // 10068425 => '恋愛天国☆恋パラコレクション',
  // 10068426 => '恋愛天国☆恋パラコレクション',
  // 10068427 => '恋愛天国☆恋パラコレクション',
  // 10068428 => '恋愛天国☆恋パラコレクション',
  // 10068429 => '恋愛天国☆恋パラコレクション',
  // 10068430 => '恋愛天国☆恋パラコレクション',
  // 10068431 => '恋愛天国☆恋パラコレクション',
  // 10068432 => '恋愛天国☆恋パラコレクション',
  // 10068433 => '恋愛天国☆恋パラコレクション',
  // 10068434 => '恋愛天国☆恋パラコレクション',
  // 10068435 => '恋愛天国☆恋パラコレクション',
  // 10068436 => '恋愛天国☆恋パラコレクション',
  // 10068437 => '恋愛天国☆恋パラコレクション',
  // 10068438 => '恋愛天国☆恋パラコレクション',
  // 10068439 => '恋愛天国☆恋パラコレクション',
  // 10068440 => '恋愛天国☆恋パラコレクション',
  // 10068441 => '恋愛天国☆恋パラコレクション',
  // 10068442 => '恋愛天国☆恋パラコレクション',
  // 10068443 => '恋愛天国☆恋パラコレクション',
  // 10068444 => '恋愛天国☆恋パラコレクション',
  // 10068445 => '恋愛天国☆恋パラコレクション',
  // 10068446 => '恋愛天国☆恋パラコレクション',
  // 10068447 => '恋愛天国☆恋パラコレクション',
  // 10068448 => '恋愛天国☆恋パラコレクション',
  // 10068449 => '恋愛天国☆恋パラコレクション',
  10068450 => '恋愛天国☆恋パラコレクション',
  10068451 => '恋愛天国☆恋パラコレクション',
  10068452 => '恋愛天国☆恋パラコレクション',
  10068453 => '潤恋オトナセレクション',
  10068454 => '潤恋オトナセレクション',
  10068455 => '潤恋オトナセレクション',
  10068456 => '潤恋オトナセレクション',
  10068457 => '潤恋オトナセレクション',
  10068458 => 'ラズベリーコレクション',
  10068459 => 'ラズベリーコレクション',
  10068460 => 'メティス・セレクション',
  10068461 => 'メティス・セレクション',
  10068462 => 'メティス・セレクション',
  10068463 => '潤恋オトナセレクション',
  10068464 => '潤恋オトナセレクション',
  10068465 => '潤恋オトナセレクション',
  10068466 => '潤恋オトナセレクション',
  10068467 => '潤恋オトナセレクション',
  10068468 => 'ウー劇コミック',
  10068469 => 'ウー劇コミック',
  10068470 => 'ウー劇コミック',
  10068471 => 'ウー劇コミック',
  10068472 => 'ウー劇コミック',
  10068475 => 'ウー劇コミック',
  10068651 => 'バンブーエッセイセレクション',
  10069197 => '竹書房劇画文庫',
  10069198 => '竹書房劇画文庫',
  10069199 => '竹書房劇画文庫',
  10069598 => '艶写文庫',
  10069599 => '艶写文庫',
  10069600 => '艶写文庫',
  10069601 => '艶写文庫',
  10069602 => '艶写文庫',
  10069603 => '艶写文庫',
  10069604 => '艶写文庫',
  10069605 => '艶写文庫',
  10069606 => '艶写文庫',
  10069607 => '艶写文庫',
  10069646 => 'ラヴァーズ文庫',
  10069647 => 'ラヴァーズ文庫',
  10069648 => 'ラヴァーズ文庫',
  10069657 => 'ラヴァーズ文庫',
  10069658 => 'ラヴァーズ文庫',
  10069669 => 'ラヴァーズ文庫',
  10069670 => 'ラヴァーズ文庫',
  10069739 => 'Z（ゼータ）文庫',
  10069740 => 'Z（ゼータ）文庫',
  10069741 => 'Z（ゼータ）文庫',
  10069742 => 'Z（ゼータ）文庫',
  10069743 => 'Z（ゼータ）文庫',
  10069744 => 'Z（ゼータ）文庫',
  10069745 => 'Z（ゼータ）文庫',
  10069746 => 'Z（ゼータ）文庫',
  10069747 => 'Z（ゼータ）文庫',
  10069748 => 'Z（ゼータ）文庫',
  10069749 => 'Z（ゼータ）文庫',
  10070084 => 'バンブーコミックスmoment',
  10071654 => 'バンブーエッセイセレクション',
  10072096 => 'バンブーエッセイセレクション',
  10072185 => 'バンブーエッセイセレクション',
  10072186 => 'バンブーエッセイセレクション',
  10072232 => 'バンブーエッセイセレクション',
  10072248 => 'コミックガンマぷらす',
  10072249 => 'コミックガンマぷらす',
  10072253 => 'コミックガンマ',
  10072259 => 'バンブーエッセイセレクション',
  10072281 => 'コミックガンマ',
  10072312 => 'コミックガンマ',
  10072313 => 'コミックガンマ',
  10072314 => 'コミックガンマぷらす',
  10072315 => 'コミックガンマぷらす',
  10072316 => 'コミックガンマぷらす',
  10072317 => 'コミックガンマぷらす',
  10072318 => 'コミックガンマぷらす',
  10072319 => 'コミックガンマぷらす',
  10072320 => 'コミックガンマぷらす',
  10072321 => 'コミックガンマぷらす',
  10072322 => 'コミックガンマぷらす',
  10072323 => 'コミックガンマぷらす',
  10072414 => 'バンブーコミックスmoment',
  10072415 => 'バンブーコミックスmoment',
  10072473 => 'バンブーコミックスmoment',
  10072626 => 'ラヴァーズ文庫',
  10072694 => 'ガンマ文庫',
  10072697 => 'バンブーコミックスmoment',
  10072772 => 'ガンマ文庫',
  10072773 => 'ガンマ文庫',
  10072806 => 'ガンマ文庫',
  10072807 => 'ガンマ文庫',
  10072810 => 'バンブーコミックス ギルティ',
  10072811 => 'バンブーコミックス ギルティ',
  10073426 => 'ガンマ文庫',
  10073465 => 'タソガレ文庫',
  10073476 => 'ガンマ文庫',
  10073477 => 'ガンマ文庫',
  10073523 => 'タソガレ文庫',
  10073524 => 'タソガレ文庫',
  10073547 => 'ガンマ文庫',
  10073548 => 'ガンマ文庫',
  10073549 => 'ガンマ文庫',
  10073568 => 'ガンマ文庫',
  10073618 => 'ムーンドロップス',
  10073685 => 'タソガレ文庫',
  10073897 => 'ガンマ文庫',
  10073898 => 'ガンマ文庫',
  10073899 => 'ガンマ文庫',
  10074105 => 'タソガレ文庫',
  10074413 => 'タソガレ文庫',
  10074451 => 'バンブーエッセイセレクション',
  10074506 => 'タソガレ文庫',
  10074557 => 'タソガレ文庫',
);

// ！！！！！！！！！！！！！！
// ！！！実行後は bookCountの再計算処理を実行する！！！
// ！！！！！！！！！！！！！！

// シリーズ名に ' が入っている場合は考慮できていない(setformatは考慮している)
$publisher_id = 1125; // 竹書房 pro
$debug = true;

if($debug) {
  // Docker用
  // 先に Postgres側を起動しておかないと IPが認識できず、アクセスできない
  $dsn = 'pgsql:dbname=app_development;host=172.20.254.227;port=15432';
  $db = new PDO($dsn, 'postgres', 'password');
  $publisher_id = 1002; // docker

  // // STG用
  // $dsn = 'pgsql:dbname=d32hupuj29g33c;host=ec2-44-206-11-200.compute-1.amazonaws.com;port=5432';
  // $db = new PDO($dsn, 'rszgmnfrbqlgot', '237cbd5e1db3db80228bbf1483cd208c850e4d22bfd12c85b7e317b1cc569700');
} else {
  // 本番用
  $dsn = 'pgsql:dbname=d3uldjpkj3ctch;host=ec2-34-233-148-141.compute-1.amazonaws.com;port=5432';
  $db = new PDO($dsn, 'u43nqlr506q4qg', 'pd20127aa81443c772b163cc2eb6c9960b8735bb9a29528e868c86af98c8ed8ed');
}

$datacount = count($datalist);

ob_start();

$i = 0;
$roop = 0;
foreach ($datalist as $k => $v) {
  // 書誌の存在チェック
  $sql = "select id from books where id = '{$k}' and publisher_id = {$publisher_id};";
  $sth = $db->query($sql);
  $book = $sth->fetch(PDO::FETCH_ASSOC);
  if(empty($book)) {
    // 書誌データがない場合は スキップ
    echo "not book data id {$k}<br>";
    flush();
    ob_flush();
    continue;
  }

  // シリーズ分割
  $serieslist = explode('|',$v);
  foreach ($serieslist as $gk => $gv) {
    $gv = trim($gv);
    // 階層構造 分割
    $gt = explode('>',$gv);
    $depth = count($gt);
    if($depth > 3) {
      // 4階層目以降が設定されているため エラー
      echo "depth error book id {$k}<br>";
      flush();
      ob_flush();
      break;
    }
    $pg = null;
    foreach ($gt as $gtk => $gtv) {
      $gtv = trim($gtv);
      if($gtk == 0) {
        // 1階層 登録確認
        $sql = "select * from series where publisher_id = {$publisher_id} and name = '{$gtv}';";
      } else {
        // 2階層目以降 登録確認
        $sql = "select * from series where publisher_id = {$publisher_id} and name = '{$gtv}' and lft > {$pg['lft']} and rgt < {$pg['rgt']};";
      }
      $sth = $db->query($sql);
      $g = $sth->fetch(PDO::FETCH_ASSOC);
      if(empty($g)) {
        // シリーズの登録が必要
        if($gtk == 0) {
          // 1階層 登録

          // 最大のrgt値取得
          $sql2 = "select max(rgt) from series where publisher_id = {$publisher_id}";
          $sth = $db->query($sql2);
          $r = $sth->fetch(PDO::FETCH_ASSOC);
          $maxlft = 0;
          if ( !empty($r) && !empty($r['max'])) {
            $maxlft = $r['max'];
          }
          $name_search = tools::convertSearchText($gtv);
          $isql = "insert into series (name,publisher_id,lft,rgt,depth,created_at,updated_at,name_search) values ('{$gtv}',{$publisher_id}," . ($maxlft + 1) . "," . ($maxlft + 2) . ",{$gtk},now(),now(),'{$name_search}');";
        } else {
          // 2階層目以降 登録

          // 既存のシリーズのlftとrgtを調整して
          // 追加するスペースを用意する
          $isql = "update series set lft = lft+2 where publisher_id = {$publisher_id} and lft >= {$pg['rgt']};";
          if($db->exec($isql) === false) {
            echo "lft change error book id {$k}<br>";
            flush();
            ob_flush();
            break 2;
          }
          $isql = "update series set rgt = rgt+2 where publisher_id = {$publisher_id} and rgt >= {$pg['rgt']};";
          if($db->exec($isql) === false) {
            echo "rgt change error book id {$k}<br>";
            flush();
            ob_flush();
            break 2;
          }
          $name_search = tools::convertSearchText($gtv);
          $isql = "insert into series (name,publisher_id,parent_id,lft,rgt,depth,created_at,updated_at,name_search) values ('{$gtv}',{$publisher_id},{$pg['id']},{$pg['rgt']}," . ($pg['rgt'] + 1) . ",{$gtk},now(),now(),'{$name_search}');";
        }
        if($db->exec($isql) === false) {
          echo "not insert series skip book id {$k}<br>";
          flush();
          ob_flush();
          break 2;
        }
        // 再取得
        if($gtk != 0) {
          // lft,rgt値が変わっているため、親から再取得
          $sql2 = "select * from series where publisher_id = {$publisher_id} and id = '{$pg['id']}';";
          $sth = $db->query($sql2);
          $pg = $sth->fetch(PDO::FETCH_ASSOC);
          if(empty($pg)) {
            echo "not get parent series skip book id {$k}<br>";
            flush();
            ob_flush();
            break 2;
          }
          $sql = "select * from series where publisher_id = {$publisher_id} and name = '{$gtv}' and lft > {$pg['lft']} and rgt < {$pg['rgt']};";
        }
        $sth = $db->query($sql);
        $g = $sth->fetch(PDO::FETCH_ASSOC);
        if(empty($g)) {
          echo "not get insert series skip book id {$k}<br>";
          flush();
          ob_flush();
          break 2;
        }
      }
      // 親シリーズとして退避
      $pg = $g;
      if(($gtk + 1) == count($gt)) {
        // 中間テーブルへ レコード追加

        // 既に レコードがないかチェックする
        $sql = "select * from book_series where book_id = {$book['id']} and series_id = {$g['id']}";
        $sth = $db->query($sql);
        $bg = $sth->fetch(PDO::FETCH_ASSOC);
        if(!empty($bg)) {
          // 既にレコードがある場合は スキップ
          echo "book_series exists id {$k}<br>";
          flush();
          ob_flush();
          continue;
        }

        $isql = "insert into book_series (book_id,series_id,created_at,updated_at) values ({$book['id']},{$g['id']},now(),now());";
        if($db->exec($isql) === false) {
          echo "not set book_series skip book id {$k}<br>";
          flush();
          ob_flush();
          break 2;
        }
      }
    }
  }

  $i++;
  $roop++;
  // if($i > 20) {
    // 20回まわったら ページ出力
    echo $roop . " / " . $datacount . " id:" . $k . "<br>";
    flush();
    ob_flush();
    $i = 0;
  // }
}
flush();
ob_flush();

ob_end_flush();

echo "end!!";
exit();
